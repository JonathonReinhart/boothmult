;---------------------------------------------------------------------------------------------------
;    Booth Multiplier - PicoBlze I/O project
;    AFIT - CSCE 587 - 2013 Spring
;    Jonathon Reinhart, Scott Dalrymple
;---------------------------------------------------------------------------------------------------


;Port definitions
CONSTANT UART_status_port,  00          ; UART status input
    CONSTANT tx_half_full,      01      ;  Transmitter     half full - bit0
    CONSTANT tx_full,           02      ;    FIFO               full - bit1
    CONSTANT rx_half_full,      04      ;  Receiver        half full - bit2
    CONSTANT rx_full,           08      ;    FIFO               full - bit3
    CONSTANT rx_data_present,   10      ;               data present - bit4

CONSTANT UART_data_port,    01          ; UART Rx data (input) & Tx data (output)


;Special Register usage
NAMEREG sF, UART_data                   ; used to pass data to and from the UART
NAMEREG sE, store_pointer               ; used to pass location of data in scratch pad memory

;Scratch Pad Memory Locations
;
; UART character strings will be stored in scratch pad memory ending in carriage return.
; A string can be up to 16 characters with the start location defined by this constant.
;
CONSTANT string_start,  20
CONSTANT string_max,    10

;---------------------------------------------------------------------------------------------------
; Begin Code

; Execution begins here at address 0x00
; Initialise the system
cold_start: 
    CALL send_Welcome
    CALL send_CR

; Start of the main program loop.
;   A prompt is transmitted to the UART transmitter and then
;   a command can be entered and interpreted.
prompt_input: 
    CALL send_prompt                         ; Prompt 'BOOTH>'
    CALL receive_string                      ; obtain input string and maintain the time

; Parse the string and perform actions as required
    LOAD s1, string_start
    CALL fetch_char_from_memory
    COMPARE s0, character_CR                 ; Carriage return does nothing
    JUMP Z, prompt_input
    
    COMPARE s0, character_X                  ; 'X' (Multiplier) command?
    JUMP Z, command_X
    COMPARE s0, character_Y                  ; 'Y' (Multiplicand) command?
    JUMP Z, command_Y
    COMPARE s0, character_P                  ; 'P' (Product) command?
    JUMP Z, command_P
    COMPARE s0, character_G                  ; start of 'GO' command?
    JUMP Z, received_G
    
; bad command received
bad_input_command: 
    CALL send_Syntax_Error                   ; no valid command
    JUMP Z, prompt_input


command_X:      ; now have a valid X command to process
    CALL fetch_char_from_memory
    COMPARE s0, character_CR                ; carriage return means display X
    JUMP NZ, set_X_command
    CALL transmit_X                         ; transmit X to UART
    JUMP prompt_input
    
command_Y:      ; now have a valid Y command to process
    CALL fetch_char_from_memory
    COMPARE s0, character_CR                ; carriage return means display Y
    JUMP NZ, set_Y_command
    CALL transmit_Y                         ; transmit Y to UART
    JUMP prompt_input

command_P:      ; now have a valid P command to process
    CALL fetch_char_from_memory
    COMPARE s0, character_CR                ; carriage return means display P
    JUMP NZ, bad_input_command
    CALL transmit_P                         ; transmit P to UART
    JUMP prompt_input

received_G:
    CALL fetch_char_from_memory
    COMPARE s0, character_O                 ; test for rest of 'GO'
    JUMP NZ, bad_input_command
    ; now have a valid GO command to process
    CALL fetch_char_from_memory
    COMPARE s0, character_CR
    JUMP NZ, bad_input_command
    CALL go_command
    JUMP prompt_input
                        
set_X_command: 
    COMPARE s0, character_space
    JUMP NZ, bad_input_command
    CALL test_hex_string                    ; s4 (LSB) - s7 (MSB) will have 32-bit value
    JUMP C, prompt_input
    ; TODO: Set X
    CALL transmit_X
    JUMP prompt_input
    
set_Y_command: 
    COMPARE s0, character_space
    JUMP NZ, bad_input_command
    CALL test_hex_string                    ; s4 (LSB) - s7 (MSB) will have 32-bit value
    JUMP C, prompt_input
    ; TODO: Set Y
    CALL transmit_Y
    JUMP prompt_input                        




transmit_P: 
    LOAD UART_data, character_P
    CALL send_to_UART
    LOAD UART_data, character_equals
    CALL send_to_UART
    ; TODO: Load s7:s4 with P[63:32]
    CALL print_dword_hex
    ; TODO: Load s7:s4 with P[63:32]
    CALL print_dword_hex
    JUMP print_h_CR          ; tail-call
    
transmit_X: 
    LOAD UART_data, character_X
    CALL send_to_UART
    LOAD UART_data, character_equals
    CALL send_to_UART
    ; TODO: Load s7:s4 with X
    CALL print_dword_hex
    JUMP print_h_CR          ; tail-call
    
transmit_Y: 
    LOAD UART_data, character_Y
    CALL send_to_UART
    LOAD UART_data, character_equals
    CALL send_to_UART
    ; TODO: Load s7:s4 with Y
    CALL print_dword_hex
    JUMP print_h_CR          ; tail-call
    
print_h_CR: 
    LOAD UART_data, character_h
    CALL send_to_UART
    CALL send_CR
    RETURN
                        
                        
                        
                        
                        
                        
                        
                        
go_command: 
    CALL send_Calculating
    ; TODO: Do work!
    CALL send_Done
    CALL send_CR
    RETURN           
                        
                        
                        
; Convert hex string in scratchpad memory at s1 from hex to bytes in s7 (MSB) s4 (LSB)
; TODO: Do a 4-byte shift to deal with partial strings?
test_hex_string: 
    CALL hex2char_to_byte
    JUMP C, invalid_hex_string
    LOAD s7, s2
    CALL hex2char_to_byte
    JUMP C, invalid_hex_string
    LOAD s6, s2
    CALL hex2char_to_byte
    JUMP C, invalid_hex_string
    LOAD s5, s2
    CALL hex2char_to_byte
    JUMP C, invalid_hex_string
    LOAD s4, s2
    LOAD s0, 00
    SR0 s0                                   ;reset CARRY flag (with s0=0)
    RETURN                                   ;hex string was OK
invalid_hex_string: 
    CALL send_Invalid
    LOAD s0, 01
    SR0 s0                                   ;set CARRY flag
    RETURN                                   ;time string was bad                


                        
; prints a DWOR in s7 (MSB) - s4 (LSB) as hex to the UART   
print_dword_hex:   
    LOAD s0, s7
    CALL print_byte_hex
    LOAD s0, s6
    CALL print_byte_hex
    LOAD s0, s5
    CALL print_byte_hex
    LOAD s0, s4
    CALL print_byte_hex
    RETURN
                        
; Prints the value in s0 as hex.
; Destroys registers: s0, s1, s2
print_byte_hex:  
    LOAD    s2, s0

    ; Print the high nibble
    LOAD    s0, s2
    SR0     s0
    SR0     s0
    SR0     s0
    SR0     s0
    CALL    print_hex_char

    ; Print the low nibble
    LOAD    s0, s2
    CALL    print_hex_char
    RETURN
                        
; Prints the lower nibble of s0 to the UART as ASCII hex.
; Destroys registers: s0, s1
print_hex_char:   
    AND     s0, 0F                      ; Mask off only low nibble
    LOAD    s1, s0

    SUB     s1, 0A                      ; s1 -= 10
    JUMP    C,  print_hex_char__lt10    ; s0 is less than 10. print as '0'-'9'

    print_hex_char__ge10:                   ; >= 10. Already subtracted 10. Add to 'A'
    LOAD    s0, s1
    ADD     s0, character_A
    JUMP    print_hex_char__go

    print_hex_char__lt10:                   ; < 10. Add to '0'
    ADD     s0, character_0

    print_hex_char__go:                     ; Send the char out the UART and return
    LOAD    UART_data, s0
    CALL    send_to_UART
    RETURN

                        
;
;Fetch character from memory, convert to upper case
;and increment memory pointer.
;
;The memory pointer is provided in register s1.
;The character obtained is returned in register s0.
;
;Registers used s0 and s1.
;
fetch_char_from_memory: 
    FETCH s0, (s1)                           ;read character
    CALL upper_case                          ;convert to upper case
    ADD s1, 01                               ;increment memory pointer
    RETURN
                        
;
;
;
;Read one character from the UART
;
;Character read will be returned in a register called 'UART_data' and will be
;echoed to the UART transmitter.
;
;The routine first tests the receiver FIFO buffer to see if data is present.
;If the FIFO is empty, the routine waits until there is a character to read.
;As this could take any amount of time the wait loop includes a call to the
;subroutine which updates the real time clock.
;
;Registers used s0 and UART_data
;
read_from_UART: 
    INPUT s0, UART_status_port               ;test Rx_FIFO buffer
    TEST s0, rx_data_present
    JUMP Z, read_from_UART
read_character: 
    INPUT UART_data, UART_data_port          ;read from FIFO
    CALL send_to_UART                        ;echo received character
    RETURN
;
;
;
;Transmit one character to the UART
;
;Character supplied in register called 'UART_data'.
;
;The routine first tests the transmit FIFO buffer to see if it is full.
;If the FIFO is full, the routine waits until there is space which could
;be as long as it takes to transmit one complete character.
;
;    Baud Rate    Time per Character (10 bits)
;      9600           1,024us
;     19200             521us
;     38400             260us
;     57600             174us
;    115200              87us
;
;Since this is a relatively long duration, the wait loop includes a
;call to the subroutine which updates the real time clock.
;
;Registers used s0
;
send_to_UART: 
    INPUT s0, UART_status_port               ;test Tx_FIFO buffer
    TEST s0, tx_full
    JUMP NZ, send_to_UART
    OUTPUT UART_data, UART_data_port
    RETURN
                        

;
;
;Transmit ASCII string to UART
;
;An ASCII string must be provided in scratch pad memory commencing at the
;location specified by a constant named 'string_start'. The string must
;end with a carriage return (0D).
;
;Registers used s1 and 'UART_data'.
;               s0 is then used in subroutine 'send_to_UART'
;
transmit_string: 
    LOAD s1, string_start                    ;locate start of string
next_char_tx: 
    FETCH UART_data, (s1)                    ;read character from memory
    CALL send_to_UART                        ;transmit character
    COMPARE UART_data, character_CR          ;test for last character
    RETURN Z
    ADD s1, 01                               ;move to next character
    JUMP next_char_tx
    
;
;
;Receive ASCII string from UART
;
;An ASCII string will be read from the UART and stored in scratch pad memory
;commencing at the location specified by a constant named 'string_start'.
;The string will will have a maximum length of 16 characters including a
;carriage return (0D) denoting the end of the string.
;
;As each character is read, it is echoed to the UART transmitter.
;Some minor editing is supported using backspace (BS=08) which is used
;to adjust what is stored in scratch pad memory and adjust the display
;on the terminal screen using characters sent to the UART transmitter.
;
;A test is made for the receiver FIFO becoming full. A full status is treated as
;a potential error situation and will result in a 'Overflow Error' message being
;transmitted to the UART, the receiver FIFO being purged of all data and an
;empty string being stored (carriage return at first location).
;
;Registers used s0, s1, s2 and 'UART_data'.
;
receive_string: 
    LOAD s1, string_start                    ;locate start of string
    LOAD s2, s1                              ;compute string_max character address
    ADD s2, string_max
receive_full_test: 
    INPUT s0, UART_status_port               ;test Rx_FIFO buffer for full
    TEST s0, rx_full
    JUMP NZ, read_error
    CALL read_from_UART                      ;obtain and echo character
    STORE UART_data, (s1)                    ;write to memory
    COMPARE UART_data, character_CR          ;test for end of string
    RETURN Z
    COMPARE UART_data, character_BS          ;test for back space
    JUMP Z, BS_edit
    ADD s1, 01                               ;increment memory pointer
    COMPARE s1, s2                           ;test for pointer exceeding string_max characters
    JUMP NZ, receive_full_test               ;next character
    CALL send_backspace                      ;hold end of string position on terminal display
BS_edit: 
    SUB s1, 01                               ;memory pointer back one
    COMPARE s1, string_start                 ;test for under flow
    JUMP C, string_start_again
    CALL send_space                          ;clear character at current position
    CALL send_backspace                      ;position cursor
    JUMP receive_full_test                   ;next character
string_start_again: 
    CALL send_greater_than                   ;restore '>' at prompt
    JUMP receive_string                      ;begin again
    ;Receiver buffer overflow condition
read_error: 
    CALL send_CR                             ;Transmit error message
    STORE UART_data, string_start            ;empty string in memory (start with CR)
    CALL send_Overflow_Error
    CALL send_CR
clear_UART_Rx_loop: 
    INPUT s0, UART_status_port               ;test Rx_FIFO buffer for data
    TEST s0, rx_data_present
    RETURN Z                                 ;finish when buffer is empty
    INPUT UART_data, UART_data_port          ;read from FIFO and ignore
    JUMP clear_UART_Rx_loop
    
;
;
;
;Send Carriage Return to the UART
;
send_CR: 
    LOAD UART_data, character_CR
    CALL send_to_UART
    RETURN
;
;
;
;Send a space to the UART
;
send_space: 
    LOAD UART_data, character_space
    CALL send_to_UART
    RETURN
;
;
;Send a back space to the UART
;
send_backspace: 
    LOAD UART_data, character_BS
    CALL send_to_UART
    RETURN
;
;Send 'Syntax Error' to the UART
;
send_Syntax_Error: 
    LOAD UART_data, character_S
    CALL send_to_UART
    LOAD UART_data, character_y
    CALL send_to_UART
    LOAD UART_data, character_n
    CALL send_to_UART
    LOAD UART_data, character_t
    CALL send_to_UART
    LOAD UART_data, character_a
    CALL send_to_UART
    LOAD UART_data, character_x
    CALL send_to_UART
    JUMP send_space_Error
;
;Send 'Overflow Error' to the UART
;
send_Overflow_Error: 
    LOAD UART_data, character_O
    CALL send_to_UART
    LOAD UART_data, character_v
    CALL send_to_UART
    LOAD UART_data, character_e
    CALL send_to_UART
    LOAD UART_data, character_r
    CALL send_to_UART
    LOAD UART_data, character_f
    CALL send_to_UART
    LOAD UART_data, character_l
    CALL send_to_UART
    LOAD UART_data, character_o
    CALL send_to_UART
    LOAD UART_data, character_w
    CALL send_to_UART
send_space_Error: 
    CALL send_space
;
;Send 'Error' to the UART
;
send_Error: 
    LOAD UART_data, character_E
    CALL send_to_UART
    LOAD UART_data, character_r
    CALL send_to_UART
    CALL send_to_UART
    LOAD UART_data, character_o
    CALL send_to_UART
    LOAD UART_data, character_r
    CALL send_to_UART
    RETURN
;
;Send 'BOOTH>' prompt to the UART
;
send_prompt: 
    CALL send_CR                             ;start new line
    LOAD UART_data, character_B
    CALL send_to_UART
    LOAD UART_data, character_O
    CALL send_to_UART
    LOAD UART_data, character_O
    CALL send_to_UART
    LOAD UART_data, character_T
    CALL send_to_UART
    LOAD UART_data, character_H
    CALL send_to_UART
;
;Send '>' character to the UART
;
send_greater_than: 
    LOAD UART_data, character_greater_than
    CALL send_to_UART
    RETURN
;
;Send 'Invalid' string to the UART
;
send_Invalid: 
    LOAD UART_data, character_I
    CALL send_to_UART
    LOAD UART_data, character_n
    CALL send_to_UART
    LOAD UART_data, character_v
    CALL send_to_UART
    LOAD UART_data, character_a
    CALL send_to_UART
    LOAD UART_data, character_l
    CALL send_to_UART
    LOAD UART_data, character_i
    CALL send_to_UART
    LOAD UART_data, character_d
    CALL send_to_UART
    RETURN
;
; Send 'Welcome!' string to the UART
;
send_Welcome: 
    LOAD UART_data, character_W
    CALL send_to_UART
    LOAD UART_data, character_e
    CALL send_to_UART
    LOAD UART_data, character_l
    CALL send_to_UART
    LOAD UART_data, character_c
    CALL send_to_UART
    LOAD UART_data, character_o
    CALL send_to_UART
    LOAD UART_data, character_m
    CALL send_to_UART
    LOAD UART_data, character_e
    CALL send_to_UART
    LOAD UART_data, character_exclaim
    CALL send_to_UART
    RETURN
;
; Send 'Calculating...' string to the UART
;
send_Calculating: 
    LOAD UART_data, character_C
    CALL send_to_UART
    LOAD UART_data, character_a
    CALL send_to_UART
    LOAD UART_data, character_l
    CALL send_to_UART
    LOAD UART_data, character_c
    CALL send_to_UART
    LOAD UART_data, character_u
    CALL send_to_UART
    LOAD UART_data, character_l
    CALL send_to_UART
    LOAD UART_data, character_a
    CALL send_to_UART
    LOAD UART_data, character_t
    CALL send_to_UART
    LOAD UART_data, character_i
    CALL send_to_UART
    LOAD UART_data, character_n
    CALL send_to_UART
    LOAD UART_data, character_g
    CALL send_to_UART
    LOAD UART_data, character_period
    CALL send_to_UART
    LOAD UART_data, character_period
    CALL send_to_UART
    LOAD UART_data, character_period
    CALL send_to_UART
    RETURN
;
; Send 'done' string to the UART
;
send_Done: 
    LOAD UART_data, character_D
    CALL send_to_UART
    LOAD UART_data, character_o
    CALL send_to_UART
    LOAD UART_data, character_n
    CALL send_to_UART
    LOAD UART_data, character_e
    CALL send_to_UART
    RETURN
                        

    
;
;
;Convert character to upper case
;
;The character supplied in register s0.
;If the character is in the range 'a' to 'z', it is converted
;to the equivalent upper case character in the range 'A' to 'Z'.
;All other characters remain unchanged.
;
;Registers used s0.
;
upper_case: 
    COMPARE s0, 61                           ;eliminate character codes below 'a' (61 hex)
    RETURN C
    COMPARE s0, 7B                           ;eliminate character codes above 'z' (7A hex)
    RETURN NC
    AND s0, DF                               ;mask bit5 to convert to upper case
    RETURN

                        
hex1char_to_byte: 
    CALL fetch_char_from_memory
    COMPARE s0, character_0
    RETURN C                                ; reject < '0' - CARRY set
    COMPARE s0, character_colon             ; '9'+1
    JUMP NC, test_AF
    SUB s0, character_0                     ; valid - CARRY not set
    RETURN
test_AF: 
    COMPARE s0, character_A
    RETURN C                                ; reject < 'A' - CARRY set
    COMPARE s0, character_G
    JUMP NC, bad_AF
    SUB s0, character_A
    ADD s0, 0A
    RETURN
bad_AF: 
    LOAD s0, 01
    SR0 s0                                   ;set CARRY flag
    RETURN 

hex2char_to_byte: 
    CALL hex1char_to_byte
    RETURN C
    LOAD s2, s0
    SL0 s2
    SL0 s2
    SL0 s2
    SL0 s2
    CALL hex1char_to_byte
    RETURN C
    OR s2, s0
    RETURN
                        

                        
;---------------------------------------------------------------------------------------------------
; ASCII table
CONSTANT character_a, 61
CONSTANT character_b, 62
CONSTANT character_c, 63
CONSTANT character_d, 64
CONSTANT character_e, 65
CONSTANT character_f, 66
CONSTANT character_g, 67
CONSTANT character_h, 68
CONSTANT character_i, 69
CONSTANT character_j, 6A
CONSTANT character_k, 6B
CONSTANT character_l, 6C
CONSTANT character_m, 6D
CONSTANT character_n, 6E
CONSTANT character_o, 6F
CONSTANT character_p, 70
CONSTANT character_q, 71
CONSTANT character_r, 72
CONSTANT character_s, 73
CONSTANT character_t, 74
CONSTANT character_u, 75
CONSTANT character_v, 76
CONSTANT character_w, 77
CONSTANT character_x, 78
CONSTANT character_y, 79
CONSTANT character_z, 7A
CONSTANT character_A, 41
CONSTANT character_B, 42
CONSTANT character_C, 43
CONSTANT character_D, 44
CONSTANT character_E, 45
CONSTANT character_F, 46
CONSTANT character_G, 47
CONSTANT character_H, 48
CONSTANT character_I, 49
CONSTANT character_J, 4A
CONSTANT character_K, 4B
CONSTANT character_L, 4C
CONSTANT character_M, 4D
CONSTANT character_N, 4E
CONSTANT character_O, 4F
CONSTANT character_P, 50
CONSTANT character_Q, 51
CONSTANT character_R, 52
CONSTANT character_S, 53
CONSTANT character_T, 54
CONSTANT character_U, 55
CONSTANT character_V, 56
CONSTANT character_W, 57
CONSTANT character_X, 58
CONSTANT character_Y, 59
CONSTANT character_Z, 5A
CONSTANT character_0, 30
CONSTANT character_1, 31
CONSTANT character_2, 32
CONSTANT character_3, 33
CONSTANT character_4, 34
CONSTANT character_5, 35
CONSTANT character_6, 36
CONSTANT character_7, 37
CONSTANT character_8, 38
CONSTANT character_9, 39
CONSTANT character_colon,           3A
CONSTANT character_semi_colon,      3B
CONSTANT character_less_than,       3C
CONSTANT character_greater_than,    3E
CONSTANT character_equals,          3D
CONSTANT character_space,           20
CONSTANT character_period,          2E
CONSTANT character_exclaim,         21
CONSTANT character_CR,              0D      ; carriage return
CONSTANT character_question,        3F      ;'?'
CONSTANT character_dollar,          24
CONSTANT character_BS,              08      ; Back Space command character

